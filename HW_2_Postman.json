{
	"info": {
		"_postman_id": "8a1e41b0-503c-45c9-bc0b-d818ab157f5f",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "password",
							"value": "36gfhdsb8",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"let name_response = jsonData.name\r",
							"let age_response = jsonData.age\r",
							"let salary_response = jsonData.salary\r",
							"\r",
							"console.log(name_response)\r",
							"console.log(age_response)\r",
							"console.log(salary_response)\r",
							"\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(name_response).to.eql('Ulja');\r",
							"});\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(age_response).to.eql('38');\r",
							"});\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(salary_response).to.eql(2000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request\r",
							"let req = request.data\r",
							"console.log(req)\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name\r",
							"let resp_name = jsonData.name\r",
							"console.log(req_name)\r",
							"console.log(resp_name)\r",
							"\r",
							"pm.test(\"Your test name request = name response\", function () {\r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = req.age\r",
							"let resp_age = jsonData.age\r",
							"console.log(req_age)\r",
							"console.log(resp_age)\r",
							"\r",
							"pm.test(\"Your test age request = age response\", function () {\r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = + req.salary\r",
							"let resp_salary = jsonData.salary\r",
							"\r",
							"console.log(req_salary)\r",
							"console.log(resp_salary)\r",
							"\r",
							"pm.test(\"Your test salary request = salary response\", function () {\r",
							"    pm.expect(req_salary).to.eql(resp_salary);});\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"let family_response = jsonData.family\r",
							"console.log(family_response)\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let resp_u_salary_1_5_year = jsonData.family['u_salary_1_5_year']\r",
							"let resp_valio_u_salary_1_5_year = req.salary * 4\r",
							"console.log(resp_valio_u_salary_1_5_year)\r",
							"console.log(resp_u_salary_1_5_year)\r",
							"\r",
							"pm.test(\"Your test u_salary_1_5_year response = salary_request * 4\", function () {\r",
							"    pm.expect(resp_u_salary_1_5_year).to.eql(resp_valio_u_salary_1_5_year);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ulja",
							"type": "text"
						},
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"//7. Спарсить request\r",
							"let req = request.data\r",
							"console.log(req)\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"pm.response.to.have.jsonBody('start_qa_salary');\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"pm.response.to.have.jsonBody('qa_salary_after_6_months');\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"pm.response.to.have.jsonBody('qa_salary_after_12_months');\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"pm.response.to.have.jsonBody('qa_salary_after_1.5_year');\r",
							"});\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"pm.response.to.have.jsonBody('qa_salary_after_3.5_years');\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\", function () {\r",
							"pm.response.to.have.jsonBody('person');\r",
							"});\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = + req.salary\r",
							"let resp_start_qa_salary = jsonData.start_qa_salary\r",
							"\r",
							"console.log(req_salary)\r",
							"console.log(resp_start_qa_salary)\r",
							"\r",
							"pm.test(\"Your test salary request = response_start_qa_salary\", function () {\r",
							"    pm.expect(req_salary).to.eql(resp_start_qa_salary);});\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let req_salary_x2 = + req.salary*2\r",
							"let resp_qa_salary_after_6_months = jsonData.qa_salary_after_6_months\r",
							"\r",
							"console.log(req_salary_x2)\r",
							"console.log(resp_qa_salary_after_6_months)\r",
							"\r",
							"pm.test(\"Your test salary*2 request = response_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(req_salary_x2).to.eql(resp_qa_salary_after_6_months);});\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let req_salary_x2_7 = + req.salary*2.7\r",
							"let resp_qa_salary_after_12_months = jsonData.qa_salary_after_12_months\r",
							"\r",
							"console.log(req_salary_x2_7)\r",
							"console.log(resp_qa_salary_after_12_months)\r",
							"\r",
							"pm.test(\"Your test salary*2.7 request = response_qa_salary_after_12_months\", function () {\r",
							"    pm.expect(req_salary_x2_7).to.eql(resp_qa_salary_after_12_months);});\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let req_salary_x3_3 = + req.salary*3.3\r",
							"let resp_qa_salary_after_1_5_year = jsonData[\"qa_salary_after_1.5_year\"]\r",
							"\r",
							"console.log(req_salary_x3_3)\r",
							"console.log(resp_qa_salary_after_1_5_year)\r",
							"\r",
							"pm.test(\"Your test salary*3.3 request = response_qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(req_salary_x3_3).to.eql(resp_qa_salary_after_1_5_year);});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let req_salary_x3_8 = + req.salary*3.8\r",
							"let resp_qa_salary_after_3_5_years = jsonData[\"qa_salary_after_3.5_years\"]\r",
							"\r",
							"console.log(req_salary_x3_8)\r",
							"console.log(resp_qa_salary_after_3_5_years)\r",
							"\r",
							"pm.test(\"Your test salary*3.8 request = response_qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(req_salary_x3_8).to.eql(resp_qa_salary_after_3_5_years);});\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let resp_person_u_name_1 = pm.response.json().person.u_name[1]\r",
							"let req_salary1 = + req.salary\r",
							"console.log(resp_person_u_name_1)\r",
							"console.log(req_salary1)\r",
							"pm.test(\"resp_person_u_name_1 = request_salary\", function () {\r",
							"    pm.expect(req_salary1).to.eql(resp_person_u_name_1);});\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let resp_person_u_age = pm.response.json().person.u_age\r",
							"let req_age1 = + req.age\r",
							"console.log(resp_person_u_age)\r",
							"console.log(req_age1)\r",
							"pm.test(\"resp_person_u_age = request_salary\", function () {\r",
							"    pm.expect(req_age1).to.eql(resp_person_u_age);});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let resp_person_u_salary_5_years = pm.response.json().person.u_salary_5_years\r",
							"let req_salary_x4_2 = + req.salary*4.2\r",
							"console.log(resp_person_u_salary_5_years)\r",
							"console.log(req_salary_x4_2)\r",
							"pm.test(\"resp_person_u_age = request_salary\", function () {\r",
							"    pm.expect(req_salary_x4_2).to.eql(resp_person_u_salary_5_years);});\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"//let resp_person_elements = pm.response.json().person\r",
							"for (let personKey in pm.response.json().person) {\r",
							"  console.log( personKey + \":\" + pm.response.json().person[personKey] );\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.all();\r",
							"console.log(req)\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = pm.request.url.query.get('name')\r",
							"let resp_name = pm.response.json().name\r",
							"console.log(resp_name);\r",
							"console.log(req_name)\r",
							"pm.test(\"Your test name request = name response\", () => {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = pm.request.url.query.get('age')\r",
							"let resp_age = pm.response.json().age\r",
							"console.log(resp_age);\r",
							"console.log(req_age)\r",
							"pm.test(\"Your test age request = age response\", () => {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = pm.request.url.query.get('salary')\r",
							"let resp_salary = pm.response.json().salary\r",
							"console.log(resp_salary);\r",
							"console.log(req_salary)\r",
							"pm.test(\"Your test salary request = salary response\", () => {\r",
							"    pm.expect(resp_salary).to.eql(+req_salary);\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"let resp_family = pm.response.json().family\r",
							"console.log(resp_family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"let resp_dog = pm.response.json().family.pets.dog;\r",
							"console.log(resp_dog)\r",
							"pm.test(\"Test dog_name\", () => {\r",
							"  pm.expect(jsonData.family.pets.dog).to.have.haveOwnProperty(\"name\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"Test dog_age\", () => {\r",
							"  pm.expect(jsonData.family.pets.dog).to.have.haveOwnProperty(\"age\");\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"let resp_pets_dog_name = pm.response.json().family.pets.dog.name\r",
							"console.log(resp_pets_dog_name);\r",
							"pm.test(\"Your test name dog = Luky\", () => {\r",
							"    pm.expect(resp_pets_dog_name).to.eql('Luky');\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"let resp_pets_dog_age = pm.response.json().family.pets.dog.age\r",
							"console.log(resp_pets_dog_age);\r",
							"pm.test(\"Your test age dog = 4\", () => {\r",
							"    pm.expect(resp_pets_dog_age).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Ulja&age=38&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ulja"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.all();\r",
							"console.log(req)\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = pm.request.url.query.get('name')\r",
							"let resp_name = pm.response.json().name\r",
							"console.log(resp_name);\r",
							"console.log(req_name)\r",
							"pm.test(\"Your test name request = name response\", () => {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = + pm.request.url.query.get('age')\r",
							"let resp_age = pm.response.json().age\r",
							"console.log(resp_age);\r",
							"console.log(req_age)\r",
							"pm.test(\"Your test age request = age response\", () => {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"let req_salary = + pm.request.url.query.get('salary')\r",
							"console.log(req_salary)\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"let resp_salary = pm.response.json().salary\r",
							"console.log(resp_salary)\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let resp_salary_0 = pm.response.json().salary[0]\r",
							"console.log(resp_salary_0)\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"let resp_salary_1 = pm.response.json().salary[1]\r",
							"console.log(resp_salary_1)\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let resp_salary_2 = pm.response.json().salary[2]\r",
							"console.log(resp_salary_2)\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Your test salary request = salary_0 response\", () => {\r",
							"    pm.expect(resp_salary_0).to.eql(req_salary);\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let resp_salary_x2 = req_salary *2\r",
							"console.log(resp_salary_x2)\r",
							"pm.test(\"Your test salary request = salary_0 response\", () => {\r",
							"    pm.expect(+ resp_salary_1).to.eql(resp_salary_x2);\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let resp_salary_x3 = req_salary *3\r",
							"console.log(resp_salary_x3)\r",
							"pm.test(\"Your test salary request = salary_0 response\", () => {\r",
							"    pm.expect(+ resp_salary_2).to.eql(resp_salary_x3);\r",
							"});\r",
							"//15. Создать в окружении переменную name\r",
							"pm.environment.set('name');\r",
							"//16. Создать в окружении переменную age\r",
							"pm.environment.set('age');\r",
							"//17. Создать в окружении переменную salary\r",
							"pm.environment.set('salary');\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set('name' , req_name);\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set('age' , req_age);\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set('salary' , req_salary);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for (let salaryKey in pm.response.json().salary) {\r",
							"  console.log( salaryKey + \":\" + pm.response.json().salary[salaryKey] );\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Ulja&age=38&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ulja"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		}
	]
}